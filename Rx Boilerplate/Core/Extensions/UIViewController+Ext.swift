//
//  UIViewController+Ext.swift
//
//  Created by Aaron Lee on 2021/05/18.
//

import UIKit
import Lottie

extension UIViewController {
    
    /// Î∞∞Í≤ΩÏùÑ Î∏îÎü¨Ï≤òÎ¶¨
    func addBlur() {
        let blurFx = UIBlurEffect(style: UIBlurEffect.Style.dark)
        let blurFxView = UIVisualEffectView(effect: blurFx)
        blurFxView.frame = view.bounds
        blurFxView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        view.insertSubview(blurFxView, at: 0)
    }
    
    /// ÏïåÎ¶º Î≥¥Ïó¨Ï£ºÍ∏∞
    func showAlert(title: String? = "NetworkErrorAlertTitle".localized(comment: "Ïò§Î•ò"),
                   message: String? = "NetworkErrorAlertDescription".localized(comment: "Îã§Ïãú Ìïú Î≤à ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî\nÏßÄÏÜçÏ†ÅÏúºÎ°ú Î¨∏Ï†úÍ∞Ä Ìï¥Í≤∞ÎêòÏßÄ ÏïäÏùÑ Í≤ΩÏö∞ Ïù¥Î©îÏùº\n(witi@witi.co.kr)Î°ú Î¨∏ÏùòÏ£ºÏÑ∏Ïöî"),
                   actions: [UIAlertAction]? = [UIAlertAction(title: "Confirm".localized(comment: "ÌôïÏù∏"),
                                                              style: .default)],
                   completion: (() -> Void)? = nil) {
        
        DispatchQueue.main.async {
            
            let alert = UIAlertController(title: title,
                                          message: message,
                                          preferredStyle: .alert)
            
            // ÌÉÄÏù¥ÌãÄ Ìè∞Ìä∏ + ÏÉâÏÉÅ
            alert.setValue(NSAttributedString(string: alert.title!,
                                              attributes: [NSAttributedString.Key.font: UIFont.systemFont(ofSize: 16, weight: UIFont.Weight.semibold),
                                                           NSAttributedString.Key.foregroundColor: UIColor.black]),
                           forKey: "attributedTitle")
            
            // Î©îÏÑ∏ÏßÄ Ìè∞Ìä∏ + ÏÉâÏÉÅ
            alert.setValue(NSAttributedString(string: alert.message!,
                                              attributes: [NSAttributedString.Key.font: UIFont.systemFont(ofSize: 13, weight: UIFont.Weight.regular),
                                                           NSAttributedString.Key.foregroundColor: UIColor.black]),
                           forKey: "attributedMessage")
            
            // Ïï°ÏÖò Ï∂îÍ∞Ä
            actions?.forEach {
                // ÌÉÄÏù¥ÌãÄ ÏÉâÏÉÅ
                if $0.style == .cancel {
                    $0.setValue(UIColor.lightGray, forKey: "titleTextColor")
                } else {
                    $0.setValue(UIColor.appColor(.black) ?? UIColor.red, forKey: "titleTextColor")
                }
                alert.addAction($0)
            }
            
            alert.view.subviews.first?.subviews.first?.subviews.first?.backgroundColor = .white
            
            self.present(alert, animated: true, completion: completion)
            
        }
        
    }
    
    /// Ïû†ÍπÄ Í≥ÑÏ†ï ÏïåÎ¶º
    func showLockAlert() {
        let action = UIAlertAction(title: "AccountLockAlertAction".localized(comment: "Í≥†Í∞ùÏÑºÌÑ∞Î°ú Î¨∏ÏùòÌïòÍ∏∞"),
                                   style: .default) { _ in
            self.navigationController?.popToRootViewController(animated: true)
            UIApplication.dial(number: "050713333905")
        }
        showAlert(title: "AccountLockAlertTitle".localized(comment: "Rippler Î≥∏Ïù∏ Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌïòÏòÄÏäµÎãàÎã§"),
                  message: "AccountLockAlertDescription".localized(comment: "Ìï¥Îãπ Í≥ÑÏ†ïÏù¥ Ïû†Í∏àÏ≤òÎ¶¨ÎêòÏóàÏäµÎãàÎã§\nÏû†Í∏àÌï¥Ï†ú ÌïòÏãúÎ†§Î©¥ Î¨∏ÏùòÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§"),
                  actions: [action],
                  completion: nil)
    }
    
    /// Ïù¥Ï§ë Ïù∏Ï¶ù Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå ÏïåÎ¶º
    func showNoTwoFactorDataAlert() {
        let action = UIAlertAction(title: "AccountLockAlertAction".localized(comment: "Í≥†Í∞ùÏÑºÌÑ∞Î°ú Î¨∏ÏùòÌïòÍ∏∞"),
                                   style: .default) { _ in
            self.navigationController?.popToRootViewController(animated: true)
            UIApplication.dial(number: "050713333905")
        }
        showAlert(title: "AccountLockAlertTitle".localized(comment: "Rippler Î≥∏Ïù∏ Ïù∏Ï¶ùÏóê Ïã§Ìå®ÌïòÏòÄÏäµÎãàÎã§"),
                  message: "AccountLockAlertDescription".localized(comment: "Ìï¥Îãπ Í≥ÑÏ†ïÏù¥ Ïû†Í∏àÏ≤òÎ¶¨ÎêòÏóàÏäµÎãàÎã§\nÏû†Í∏àÌï¥Ï†ú ÌïòÏãúÎ†§Î©¥ Î¨∏ÏùòÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§"),
                  actions: [action],
                  completion: nil)
    }
    
    /// Ïó∞ÎùΩÏ≤ò Í∂åÌïú ÏïåÎ¶º
    func showContactPermissionAlert() {
        let actions = permissionActions()
        showAlert(title: "ContactPermissionAlertTitle".localized(comment: "Ïó∞ÎùΩÏ≤ò Ï†ëÍ∑º Í∂åÌïúÏù¥ ÌïÑÏöîÌï¥Ïöî!"),
                  message: "ContactPermissionAlertBody".localized(comment: "Ìï¥Îãπ Í∏∞Îä•ÏùÑ ÏûêÏú†Î°≠Í≤å Ï¶êÍ∏∞Í∏∞\nÏúÑÌï¥ Ïó∞ÎùΩÏ≤ò Ï†ëÍ∑º Í∂åÌïúÏù¥ ÌïÑÏöîÌï¥Ïöî."),
                  actions: actions)
    }
    
    /// Ïπ¥Î©îÎùº Í∂åÌïú ÏïåÎ¶º
    func showCameraPermissionAlert() {
        let actions = permissionActions()
        showAlert(title: "CameraPermissionAlertTitle".localized(comment: "'ÏÑ§Ï†ï > Rippler > Ïπ¥Î©îÎùº Í∂åÌïú ON'\nÏπ¥Î©îÎùº Ï†ëÍ∑º Í∂åÌïúÏùÑ ÏºúÏ£ºÏÑ∏Ïöî :)"),
                  message: "CameraPermissionAlertBody".localized(comment: "Ïπ¥Î©îÎùº Í∂åÌïú ÌóàÏö©Ìï¥Ïïº ÏÇ¨ÏßÑÍ≥º ÎπÑÎîîÏò§Î•º Ï¥¨ÏòÅÌï† Ïàò ÏûàÏñ¥ÏöîüòùÍ∂åÌïú ÏÑ§Ï†ïÌïòÎü¨ Í∞ÄÎ≥ºÍπåÏöî~?"),
                  actions: actions)
    }
    
    /// ÏïåÎ¶º Í∂åÌïú ÏïåÎ¶º
    func showLibraryPermissionAlert() {
        let actions = permissionActions()
        showAlert(title: "LibraryPermissionAlertTitle".localized(comment: "ÏÑ§Ï†ï > Rippler > Ïï®Î≤î Í∂åÌïú ON'\nÏï®Î≤î Ï†ëÍ∑º Í∂åÌïúÏùÑ ÏºúÏ£ºÏÑ∏Ïöî :)"),
                  message: "LibraryPermissionAlertBody".localized(comment: "Ïï®Î≤î Í∂åÌïú ÌóàÏö©Ìï¥Ïïº ÏÇ¨ÏßÑÍ≥º ÎπÑÎîîÏò§Î•º ÏóÖÎ°úÎìúÌï† Ïàò ÏûàÏñ¥ÏöîüòùÍ∂åÌïú ÏÑ§Ï†ïÌïòÎü¨ Í∞ÄÎ≥ºÍπåÏöî~?"),
                  actions: actions)
    }
    
    /// Í∂åÌïú ÏïåÎ¶º Ïï°ÏÖò
    private func permissionActions() -> [UIAlertAction] {
        let cancel = UIAlertAction(title: "Cancel".localized(comment: "Ï∑®ÏÜåÌïòÍ∏∞"),
                                   style: .cancel)
        let confirm = UIAlertAction(title: "Change".localized(comment: "Î≥ÄÍ≤ΩÌïòÍ∏∞"),
                                   style: .default,
                                   handler: { (action: UIAlertAction!) in
                                    if let settingUrl = URL(string: UIApplication.openSettingsURLString) {
                                        UIApplication.shared.open(settingUrl)
                                    } else {
                                        print("Setting URL invalid")
                                    }
                                   })
        return [cancel, confirm]
    }
    
    /// Î°úÎî© Î∑∞ Ï∂îÍ∞Ä
    func addLoadingView(with loadingView: UIView) {
        view.addSubview(loadingView)
        loadingView.snp.makeConstraints {
            $0.top.leading.bottom.trailing.equalToSuperview()
        }
        view.bringSubviewToFront(loadingView)
    }
    
    /// Î∑∞ Ïª®Ìä∏Î°§Îü¨ Î≥ÄÍ≤Ω
    func nestViewController(_ viewController: UIViewController, completion: (() -> Void)? = nil) {
        setNeedsStatusBarAppearanceUpdate()
        
        view.window?.rootViewController = viewController
        view.window?.makeKeyAndVisible()
        
        completion?()
    }
    
    /// Î∑∞ Ïª®Ìä∏Î°§Îü¨ Ï∂îÍ∞Ä
    func embed(in viewController: UIViewController, view: UIView) {
        viewController.addChild(self)
        view.addSubview(self.view)
        viewController.didMove(toParent: self)
    }
    
    /// Alert Sheet Î≥¥Ïó¨Ï£ºÍ∏∞
    /// - Parameters:
    ///   - title: ÏïåÎ¶º ÌÉÄÏù¥ÌãÄ
    ///   - message: ÏïåÎ¶º Î©îÏÑ∏ÏßÄ
    ///   - actions: ÏïåÎ¶º Ïï°ÏÖò
    ///   - needCancel: Ï∑®ÏÜå Î≤ÑÌäº ÏûêÎèô ÏÉùÏÑ±
    func showAlertSheet(title: String? = nil, message: String? = nil, actions: [UIAlertAction] = [], needCancel: Bool = true) {
        let alert = UIAlertController(title: title, message: message, preferredStyle: .actionSheet)
        
        actions.forEach {
            alert.addAction($0)
        }
        
        if needCancel {
            let cancelAction = UIAlertAction(title: "Cancel".localized(comment: "Ï∑®ÏÜå"), style: .cancel)
            alert.addAction(cancelAction)
        }
        
        present(alert, animated: true)
    }
    
    /// ÌíÄ Ï§ëÎ≥µÏÉùÏÑ± ÏïåÎ¶º
    func showExistingPoolError(confirmAction: ((UIAlertAction) -> Void)? = nil) {
        let confirmAction = UIAlertAction(title: "Confirm".localized(comment: "ÌôïÏù∏"),
                                          style: .default,
                                          handler: confirmAction)
        
        showAlert(title: "NetworkErrorAlertTitle".localized(comment: "Ïò§Î•ò"),
                  message: "ExistingPoolErrorBody".localized(comment: "Ï§ëÎ≥µÎêú Ïù¥Î¶ÑÏùÑ Í∞ÄÏßÑ ÌíÄÏù¥ ÏûàÏñ¥Ïöî.\nÌôïÏù∏ ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî."),
                  actions: [confirmAction])
    }
    
    /// Í≥µÏßÄÏÇ¨Ìï≠ ÏïåÎ¶º
    func showNoticeAlert(completion: @escaping () -> Void) {
        RemoteConfigManager.shared.fetchAppInfo { [weak self] appInfo in
            
            let notice = appInfo?.noticeInfo
            
            if notice?.title == nil && notice?.description == nil && notice?.shouldClose == false {
                completion()
                return
            }
            
            let title = notice?.title
            let description = notice?.description
            let shouldClose = notice?.shouldClose == true
            
            let confirmAction = UIAlertAction(title: "Confirm".localized(comment: "ÌôïÏù∏"),
                                              style: .default) { _ in
                if shouldClose {
                    exit(-1)
                }
                
                completion()
                
            }
            
            self?.showAlert(title: title,
                            message: description,
                            actions: [confirmAction])
            
        }
    }
    
    func setUIInterfaceOrientation(_ value: UIInterfaceOrientation) {
        UIDevice.current.setValue(value.rawValue, forKey: "orientation")
    }
    
}
